#!/usr/bin/env python3
# -*- coding: utf-8 -*-
'''
average models (not snapshot) generated by espnet2.
'''

import argparse
import json
import os

import numpy as np
import torch


def main():
    last = args.models
    print("average over", last)
    avg = None

    # sum
    for path in last:
        states = torch.load(path, map_location=torch.device("cpu"))
        if "model" in states: 
            states = states["model"]
        if avg is None:
            avg = states
        else:
            for k in avg.keys():
                avg[k] += states[k]

    num = len(last)


    # average
    for k in avg.keys():
        if avg[k] is not None:
            if avg[k].is_floating_point():
                avg[k] /= num
            else:
                avg[k] //= num

    torch.save(avg, args.out)


def get_parser():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("-o", "--out", required=True, type=str)
    parser.add_argument("models", nargs='+', type=str)
    return parser


if __name__ == "__main__":
    args = get_parser().parse_args()
    main()
